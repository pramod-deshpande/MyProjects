@page "/create/{Id?}"
@inject ISnackbar Snackbar


<CustomHeading Title="Add Project"></CustomHeading>
<MudPaper Elevation="4" Class="rounded px-4 py-9">
    <EditForm Model="myProject" OnValidSubmit="SaveProject">
        <MudContainer Class="d-flex flex-column gap-10 justify-center" MaxWidth="MaxWidth.Medium">
            <MudTextField @bind-Value="myProject.ProjectName" Label="Project name" Required="true" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="myProject.Description" Label="Description" Lines="2" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="myProject.GithubLink" Label="Github link" Variant="Variant.Text"></MudTextField>

            <MudSelect T="string" Label="Labels" Variant="Variant.Text" @bind-Value="myProject.Label" AnchorOrigin="Origin.BottomCenter">
                @foreach (var item in Constants.Labels)
                {
                    <MudSelectItem Value=@item />
                }
            </MudSelect>
            <MudSelect T="string" Label="Category" Variant="Variant.Text" @bind-Value="myProject.Category" AnchorOrigin="Origin.BottomCenter">
                @foreach (var item in Constants.Filters)
                {
                    <MudSelectItem Value=@item />
                }
            </MudSelect>
            <MudTextField @bind-Value="myProject.Notes" Label="Notes" Lines="5" Variant="Variant.Text"></MudTextField>
            @if (!(string.IsNullOrEmpty(myProject.ProjectName) || string.IsNullOrEmpty(myProject.Category)))
            {
                <div>
                    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Dark"><MudText Typo="Typo.subtitle1">Submit</MudText></MudButton>
                </div>
            }
        </MudContainer>
    </EditForm>

</MudPaper>


@code {

    MyProject myProject = new();
    [Parameter] public string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(Id))
        {
            var project = await _db.GetProjectAsync(int.Parse(Id));
            if (project is not null)
            {
                myProject = project;
            }
        }
        else
        {
            myProject = new();
        }
    }


    async Task SaveProject()
    {
        if (myProject.Category.Equals(Constants.Filter_Completed))
        {
            myProject.IsIterationCompleted = true;
            myProject.DraftCompletionDate = DateTime.Now;
        }
        else
        {
            myProject.IsIterationCompleted = true;
            myProject.DraftCompletionDate = null;
        }
        var res = await _db.SaveItemAsync(myProject);
        myProject = new();
        Snackbar.Add($"Project successfully saved!", Severity.Normal);
        Navigation.NavigateTo("/");
    }
}
